
R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## Determine whether SNSC correlates with Degrees
> 
> ## !!!!! This was built as a take on 92.snsc_deg_correlation.R
> ## Uses an effective degrees of freedom that accounts for spatial noise in the time series data
> ## see stuff on RESELS (Worsley's RFT is a point of departue)
> ## effectively lowering resoultion from single voxel to appropriate up-samples
> 
> 
> v = 4 * 4 * 4.8   # this is the voxel size in mm
> RESEL <- function(v, N, FWHMvec) 
+     N / (prod(c(apply(read.table(paste(FWHMvec)), 2, mean))) / v)   # http://blogs.warwick.ac.uk/nichols/entry/fwhm_resel_details/
> 
> corT <- function(r, effectiveN) 
+     r / (sqrt((1-r**2)/(effectiveN-2)))   # effective N is the adjusted N after FWHM estimate for effective resolution
> 
> subjects <- c("ANGO","CLFR","MYTP","TRCO","PIGL","SNNW","LDMW","FLTM","EEPA","DNLN","CRFO","ANMS","MRZM","MRVV","MRMK","MRMC","MRAG","MNGO","LRVN")
> 
> r_estimates1 <- c()
> r_estimates3 <- c()
> effective_N1 <- c()
> effective_N3 <- c()
> for (ss in subjects)
+ {
+     d1 <- as.matrix(read.table(paste("/mnt/tier2/urihas/Andric/steadystate/links_files5p/",ss,".1.5p_linksthresh_proportion.degrees_gray", sep = "")))   # these are the degrees
+     d3 <- as.matrix(read.table(paste("/mnt/tier2/urihas/Andric/steadystate/links_files5p/",ss,".3.5p_linksthresh_proportion.degrees_gray", sep = "")))   # these are the degrees
+     snsc_with_filtvals <- as.matrix(read.table(paste("/mnt/tier2/urihas/Andric/steadystate/",ss,"/modularity5p/set_consistency2/preserved_",ss,"_median5p_20vxFltr.txt", sep = "")))
+     #print(c(ss, length(which(snsc_with_filtvals == 777)), round(length(which(snsc_with_filtvals == 777))/length(snsc_with_filtvals),3)))
+     snsc <- snsc_with_filtvals
+     snsc[which(snsc_with_filtvals == 777)] = NA
+ 
+     r_estimates1 <- c(r_estimates1, cor.test(snsc, d1, use = "complete.obs")$estimate[[1]])
+     r_estimates3 <- c(r_estimates3, cor.test(snsc, d3, use = "complete.obs")$estimate[[1]])
+ 
+     effective_N1 <- c(effective_N1, RESEL(v, length(d1), paste("/mnt/tier2/urihas/Andric/steadystate/",ss,"/",ss,".Cond1_fwhm_estimates", sep = "")))   # determine RESEL 
+     effective_N3 <- c(effective_N3, RESEL(v, length(d1), paste("/mnt/tier2/urihas/Andric/steadystate/",ss,"/",ss,".Cond3_fwhm_estimates", sep = "")))   # determine RESEL 
+ }
> 
> print(r_estimates1)
 [1]  0.179982506  0.198854657  0.206206271 -0.008913320 -0.005589725
 [6]  0.105582166 -0.120146103  0.062213052 -0.051823944 -0.009978105
[11]  0.094137824  0.160302330  0.162555138  0.006313289  0.001103082
[16]  0.049737095  0.230988289  0.127945193 -0.046664009
> print(summary(r_estimates1))
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
-0.120100 -0.007252  0.062210  0.070670  0.161400  0.231000 
> print(r_estimates3)
 [1]  0.0672828433  0.1588630501  0.1767713495 -0.0317874289  0.0169275655
 [6]  0.2027059745 -0.1548818337  0.0452939351  0.0995414474  0.0348238963
[11]  0.1332852529  0.1673792471  0.0546800285 -0.0002544885 -0.0512788619
[16]  0.0617642123  0.2144856312 -0.0090975765  0.1395910977
> print(summary(r_estimates3))
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
-0.154900  0.008337  0.061760  0.069790  0.149200  0.214500 
> 
> print(corT(r_estimates1, effective_N1))
 [1]  6.04315075  7.29012452  6.85367909 -0.30986473 -0.19700465  3.55243515
 [7] -4.64050830  2.54267056 -2.04207615 -0.36959985  3.35656717  5.17500124
[13]  5.10528515  0.20895355  0.03681624  1.77688598  7.66708537  4.40126084
[19] -1.55383578
> print(summary(corT(r_estimates1, effective_N1)))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
-4.6410 -0.2534  2.5430  2.3630  5.1400  7.6670 
> print(t.test(corT(r_estimates1, effective_N1)))

	One Sample t-test

data:  corT(r_estimates1, effective_N1) 
t = 2.9231, df = 18, p-value = 0.00908
alternative hypothesis: true mean is not equal to 0 
95 percent confidence interval:
 0.6646536 4.0613492 
sample estimates:
mean of x 
 2.363001 

> 
> print(corT(r_estimates3, effective_N3))
 [1]  2.184549263  5.945823056  6.115727016 -1.172590176  0.580461522
 [6]  7.196818661 -5.227445681  1.771193736  3.979520972  1.325036653
[11]  4.634890458  5.315144406  1.795891205 -0.008517281 -1.780635491
[16]  2.224163645  7.574339400 -0.287801388  4.731804331
> print(summary(corT(r_estimates3, effective_N3)))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 -5.227   0.286   2.185   2.468   5.023   7.574 
> print(t.test(corT(r_estimates3, effective_N3)))

	One Sample t-test

data:  corT(r_estimates3, effective_N3) 
t = 3.194, df = 18, p-value = 0.005028
alternative hypothesis: true mean is not equal to 0 
95 percent confidence interval:
 0.8447507 4.0919203 
sample estimates:
mean of x 
 2.468335 

> 
> 
> proc.time()
   user  system elapsed 
  1.031   0.061   1.410 
